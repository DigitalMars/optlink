		TITLE	CVGLBALL - Copyright (c) SLR Systems 1994

		INCLUDE	MACROS

if	fg_cvpack

		INCLUDE	CVTYPES

		PUBLIC	CV_GLOBALS_ALL_4


		.DATA

		EXTERNDEF	CV_TEMP_RECORD:BYTE

		EXTERNDEF	CURNMOD_NUMBER:DWORD,CV_PUB_TXT_OFFSET:DWORD,CV_PUB_SYMBOL_ID:DWORD,CVG_SEGMENT:DWORD
		EXTERNDEF	BYTES_SO_FAR:DWORD,CVG_SYMBOL_OFFSET:DWORD,CVG_SEGMENT_OFFSET:DWORD,CVG_SYMBOL_HASH:DWORD
		EXTERNDEF	FIRST_GSYM_GINDEX:DWORD

		EXTERNDEF	CV_GSYM_GARRAY:STD_PTR_S,CV_GSYM_STUFF:ALLOCS_STRUCT


		.CODE	CVPACK_TEXT

		EXTERNDEF	MOVE_TEXT_TO_OMF:PROC,HANDLE_CV_INDEX:PROC,FLUSH_CV_TEMP:PROC,_store_cv_symbol_info:proc
		EXTERNDEF	_output_cv_symbol_align:proc,_init_cv_symbol_hashes:proc,_flush_cv_symbol_hashes:proc
		EXTERNDEF	_release_minidata:proc,RELEASE_GARRAY:PROC,SAY_VERBOSE:PROC,GET_NAME_HASH32:PROC


CV_GLOBALS_ALL_4	PROC
		;
		;OUTPUT GLOBALPUBLIC TABLE
		;
		;
		;INITIALIZE STUFF
		;
		PUSHM	EDI,ESI,EBX
		MOV	EAX,FIRST_GSYM_GINDEX

		TEST	EAX,EAX
		JZ	L9$

		MOV	EAX,OFF DOING_SSTGLOBALSYM_MSG
		CALL	SAY_VERBOSE

		SETT	DOING_4K_ALIGN			;WE WANT S_ALIGN SYMBOLS WHERE NEEDED

		call	_init_cv_symbol_hashes
		;
		;MODULE BY MODULE, ADD PUBLIC SYMBOLS TO TABLE
		;
		MOV	ESI,FIRST_GSYM_GINDEX
		JMP	L8$

L1$:
		CONVERT	ESI,ESI,CV_GSYM_GARRAY
		ASSUME	ESI:PTR CV_GLOBALSYM_STRUCT

		MOV	EAX,[ESI]._NEXT_GSYM_GINDEX
		MOV	EDI,OFF CV_TEMP_RECORD

		PUSH	EAX
		CALL	CREATE_GLBSYM		;RETURNS DX == SEGMENT, CX:BX IS OFFSET

		MOV	EAX,OFF CV_TEMP_RECORD
		push	EAX
		call	_output_cv_symbol_align	;DO DWORD ALIGN, 4K ALIGN, RETURN OFFSET
		add	ESP,4

		MOV	CVG_SYMBOL_OFFSET,EAX	;STORE SYMBOL OFFSET
		call	_store_cv_symbol_info	;STORE INFO FOR SYMBOL HASHES

		POP	ESI
L8$:
		TEST	ESI,ESI
		JNZ	L1$

		MOV	EAX,OFF CV_GSYM_STUFF

		push	EAX
		call	_release_minidata
		add	ESP,4

		MOV	EAX,OFF CV_GSYM_GARRAY
		CALL	RELEASE_GARRAY

		MOV	EAX,OFF CV_TEMP_RECORD
		ASSUME	EAX:PTR CV_SYMBOL_STRUCT

		MOV	DPTR [EAX]._LENGTH,6 + S_ALIGN*64K
		MOV	DPTR [EAX+4],-1

		push	EAX
		call	_output_cv_symbol_align	;DO DWORD ALIGN, 4K ALIGN, RETURN OFFSET
		add	ESP,4

		;
		;  1.  DO NAME HASH TABLE
		;  2.  DO ADDRESS HASH TABLE
		;  3.  WRITE HEADER
		;  4.  DO CV_INDEX
		;
		MOV	CURNMOD_NUMBER,-1

		MOV	EAX,0129H

		push	EAX
		call	_flush_cv_symbol_hashes
		add	ESP,4
L9$:
		POPM	EBX,ESI,EDI

		RET

CV_GLOBALS_ALL_4	ENDP


CREATE_GLBSYM	PROC	NEAR
		;
		;SET HASH VARIABLES, SEG-OFFSET VARIABLES
		;
		;ESI IS GLOBALSYM_STRUCT
		;EDI IS OUTPUT BUFFER
		;
		ASSUME	ESI:PTR CV_GLOBALSYM_STRUCT

		MOV	EAX,[ESI]._HASH
		MOV	BL,BPTR [ESI]._ID		;SYMBOL TYPE

		MOV	CVG_SYMBOL_HASH,EAX
		;
		;ONLY SYMBOL TYPES ARE:
		;	I_S_CONSTANT
		;	I_S_UDT
		;	I_S_GDATA16
		;	I_S_GDATA32
		;	I_S_DATAREF
		;	I_S_PROCREF
		;
		CMP	BL,I_S_GDATA16
		JB	L1$

		MOV	BH,0
		JZ	L2$

		CMP	BL,I_S_GDATA32
		JNZ	L3$
		;
		;I_S_GDATA32
		;
		BITT	CV_SYM1_TYPE
                JNZ	L02$

		MOV	EAX,DPTR ([ESI]._LENGTH + CV_GDATA32_STRUCT._OFFSET)
		MOV	ECX,DPTR ([ESI]._LENGTH + CV_GDATA32_STRUCT._SEGMENT)

L01$:
		LEA	ESI,[ESI]._LENGTH
		AND	ECX,0FFFFH

		MOV	EBX,S_GDATA32
		JMP	L25$

L02$:
		MOV	EAX,DPTR ([ESI]._LENGTH + cvGData32Struct.Offs)
		MOV	ECX,DPTR ([ESI]._LENGTH + cvGData32Struct.Segm)
                JMP	L01$

L1$:
		;
		;I_S_CONSTANT OR I_S_UDT
		;
		XOR	EAX,EAX
		MOV	ECX,DPTR [ESI]._LENGTH

		MOV	CVG_SEGMENT_OFFSET,EAX
		AND	ECX,0FFFFH

		MOV	CVG_SEGMENT,EAX
		ADD	ECX,2

		LEA	ESI,[ESI]._LENGTH

		OPTI_MOVSB

		RET

L2$:
		;
		;I_S_GDATA16
		;
		BITT	CV_SYM1_TYPE
                JNZ	L26$

		MOV	EAX,DPTR ([ESI]._LENGTH + CV_GDATA16_STRUCT._OFFSET)
L24$:
		LEA	ESI,[ESI]._LENGTH

		MOV	ECX,EAX
		AND	EAX,0FFFFH

		SHR	ECX,16
		MOV	EBX,S_GDATA16
L25$:
		ASSUME	ESI:PTR CV_SYMBOL_STRUCT

		MOV	CVG_SEGMENT_OFFSET,EAX
		MOV	CVG_SEGMENT,ECX

		MOV	CL,BPTR [ESI]._LENGTH
		MOV	BPTR [ESI]._ID,BL

		MOV	CH,BPTR [ESI]._LENGTH+1
		MOV	BPTR [ESI]._ID+1,BH

		ADD	ECX,2

		OPTI_MOVSB

		RET

L26$:
		MOV	EAX,DPTR ([ESI]._LENGTH + cvGData16Struct.Offs)
		JMP	L24$

L3$:
		;
		;I_S_DATAREF OR I_S_PROCREF
		;
		ASSUME	ESI:PTR CVG_REF_STRUCT,EDI:PTR CV_REF_STRUCT

		ADD	EBX,S_PROCREF-I_S_PROCREF
		MOV	EAX,[ESI]._HASH

		SHL	EBX,16
		MOV	[EDI]._CHECKSUM,EAX

		OR	EBX,SIZE CV_REF_STRUCT-2
		MOV	EAX,[ESI]._ALIGN_OFF

		MOV	DPTR [EDI]._LENGTH,EBX
		MOV	[EDI]._OFFSET,EAX

		MOV	EAX,DPTR [ESI]._MODULE		;& SEGMENT
		MOV	EDX,[ESI]._OFFSET

		MOV	ECX,EAX
		AND	EAX,0FFFFH

		SHR	ECX,16
		MOV	DPTR [EDI]._MODULE,EAX		;& FILLER

		MOV	CVG_SEGMENT,ECX
		MOV	CVG_SEGMENT_OFFSET,EDX

		RET

CREATE_GLBSYM	ENDP


		.CONST

DOING_SSTGLOBALSYM_MSG DB	SIZEOF DOING_SSTGLOBALSYM_MSG-1,'Doing SSTGLOBALSYM',0DH,0AH

endif

		END

